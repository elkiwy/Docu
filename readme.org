* Todo
  - Languages
	- C
	- PHP
	- Clojure
  - Renderers
    - ASCII renderer
    - HTML renderer
    - Custom renderer
  - Other
	- Add custom docstring symbol definition
  
	
* Sketches
  Docu should be able to read code files and search for lines starting
  with "~///~~" like:
  
#+BEGIN_SRC c
///~"This function does not do anything!"
void test(char* text, int n){
#+END_SRC
  
And parse them into a data structure like this:
   
#+BEGIN_SRC json
{
    "Project" : "Project name from cmd",
    "Modules" : [{
        "Module" : "Test Module1",
        "Functions" : [{
            "FunctionName" : "test",
            "Params" : [
                {"name": "text", "type" : "char*"}, 
                {"name": "n", "type" : "int"}
            ],
            "Return" : "void",
            "Description" : "This function does not do anything!",
            "File" : "test.c"
        }]
    }]
}
#+END_SRC

Which should be then rendered in various formats like debug, ascii,
markdown, html, and more.

** Information overriding
   Certain docstrings can be used to override some information of the
   function to adjust them when needed.

#+BEGIN_SRC c
///~"This function does not do anything!"
///&realFunctionName    <-    this overrides the function name
///#int                 <-    this overrides read return value
///@1othertext          <-    this overrides name params with the provided ones, the number after the symbol specifies which argument
///!1int                <-    this overrides type params with the provided ones, the number after the symbol specifies which argument
void test(char* text, int n){
#+END_SRC


** Modules
   Modules can be specified by the docstring ~"///=ModuleName"~ at the
   top of each file. If no module is specified every function read
   will be inserted into a special "default" module.

#+BEGIN_SRC c
///:ModuleName

...

///~Function description
void test(char* text, int n){
#+END_SRC


